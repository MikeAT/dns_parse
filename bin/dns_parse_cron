#!/usr/bin/python

# This script is meant to be set up as a cron job. It uses dns_parse to 
# parse a set of gzipped pcaps and writes the result to a single log file.
# There are several config file options available, see the file at CFG_PATH
# below.

from ConfigParser import SafeConfigParser
import glob
import fcntl
import os
import subprocess
import sys

CFG_PATH = '/etc/dns_parse.cfg'
CFG_OPTIONS = ['PCAP_DIR', 'NETWORKS', 'STATE_DIR', 'OPTIONS', 
               'LOG_FILE', 'ERROR_LOG']
parser = SafeConfigParser()
parser.read(CFG_PATH)

# Grab all the config options
options = {'OPTIONS':''}
for option in CFG_OPTIONS:
    if parser.has_option('DEFAULT', option):
        options[option] = parser.get('DEFAULT', option)

    if option not in options:
        print "You must set a value for option '%s' in %s" % (option, CFG_PATH)
        sys.exit(-1)

# Process the files for each network specified.
for network in options['NETWORKS'].split():
    network = network.strip()
    if not network:
        continue
    state_fn = os.path.join(options['STATE_DIR'], network)
    if os.path.exists(state_fn):
        statefile = open(state_fn)
        last = statefile.read()
    else:
        statefile = open(state_fn, 'a')
        last = None

    try:
        # Only allow one copy of this script to run at a time.
        fcntl.flock(statefile, fcntl.LOCK_EX | fcntl.LOCK_NB)

        # It's assumed that we're using the COMPRESS option in the 
        # capture script. It's also assumed that they're named such that
        # a reversed sort will put them in order of most to least recent time
        # wise.
        path = os.path.join(options['PCAP_DIR'], network) + '.*.gz'
        files = glob.glob(path)
        files.sort(reverse=True)
        if not files:
            continue
        
        if (last not in files):
            i = 0
        else:
            i = files.index(last) - 1

        # process every file except the most current (it's currently being
        # written).
        while i > 0:
            path = os.path.join(options['PCAP_DIR'], files[i])
            cmd = 'gunzip -c %s | /usr/local/sbin/dns_parse %s >> %s 2>> %s'%\
                  (path, options['OPTIONS'], options['LOG_FILE'], 
                   options['ERROR_LOG'])
            subprocess.call(cmd, shell=True)
            i = i - 1

        if not os.path.exists(options['STATE_DIR']):
            subprocess.call(['mkdir', '-p', options['STATE_DIR']])
        wstatefile = open(state_fn, 'w')
        wstatefile.write(files[0])
        wstatefile.close()
    finally:
        fcntl.flock(statefile, fcntl.LOCK_UN)
        statefile.close()

